КОНСПЕКТ ПО АРУДИНО

микроконтроллер может принимать выдавать напряжение измерять его и работать с датчиками выводить звук картинку и многое другое

ардуино не есть микроконтроллер а плата на которой находится прочие обвесы типо преобразователей напряжения прогрмататора и тд
арудино просто облегчает работу с микроконтроллер

СУЩЕСТВУЕт ДВА ТИПА ПОРТОВ ДЛЯ ПОДКЛЮЧЕНИЯ ДАТЧИКОВ И МОДУЛЕЙ

АНАЛОГОВЫЕ
ЦИФРОВЫЕ

и те и те могут принимать и выдавать ЦИФРОВОЙ СИГНАЛ:
последовательность нулей и единиц в переводе на напряжение скачки 0 и 5 вольт

аналоговый сигнал это есть напряжение ардуино измеряет его от 0 до 5 вольт

важно знать что аналоговые менее точные и их сигнал еще может потеряться плюс важно что цифровой сигнал это именно
зашифрованная информация

ПРОВОДА НА ПЛАТЕ
почти все ардуино имеют три провода(или больше), два из которых отвечают за питание

ЗЕМЛЯ, к пину GND или k шине питания 5 вольт МИНУС
5 ВОЛЬТ, к пину 5V или k шине питания 5 вольт плюс

все остальные являются логическими и передают данные

ПОДКЛЮЧЕНИЕ ДАТЧКИОВ

тк на плате всего один порт 5в и два порта земли больше одного датчика таким образом подключить не получиться

для этого созданы макетные платы, контакты в таких платах соединены так чтобы можно было подключить гораздо большее кол-во датчкиов 

вставляем ардуино подключем к шине питания и получается есть целая линия 5 вольт и земли и можно к ней подключать датчиками

есть еще сенсор шилд (в разы упрощает работу)

ПИТАНИЕ АРДУИНО ОСУЩЕСТВЛЯЕТСЯ ОТ:
- USB
- можно запитать от проводов пдоключив к пину граунд и 5в и подать напряжение например через зарядку для телефона
- можно заставить работать и от батарейки повышая напряжение до 5в с помщью модулей 
- также есть пин VIN на этот пин и землю можно подать от 7 до 15 вольт и ардуино тоже будет работать тк на плате уже есть всторенный стабилизатор напряжения



ПРО ЯЗЫК:
(по сути упрощенная версия плюсов)

ТИПЫ ДАННЫХ
Тип|Размер(в байтах)

boolean|1|
char|1| хранит номер символа по таблице ASCII
byte|1| для хранения небольщих полодительных чисел (0...255)
int|2| -32768 32767
unsigned int|2| 0...65535
word|2| абсолютно тоже самое что прошлый
long|4| -2147483648...2147483647
unsigned long|4| по аналогии с int и unsigned int но до 0...4294967295
float|4| при делении инта с целью получить число с плавающей точкой пишем (float) перед целым числом

МОНИТОР ПОРТА КОМ ПОРТ И ТД 
открывается в иде 
туда можем слать значения и арудино может слать что то в ответ
для того чтобы работать с ком портом суещствует отдельная библиотека которая имеет объект

Serial - объект билиотеки Serial для раоты с последовательным портом(Com портом)

Serial.begin(<скорость>); - открыть порт (измеряется в бодах)
Serial.print("HELLO WORLD!") - вывод в порт

чтобы перевести вывод на след строку и избежать склеивания:
Serial.println("TEXT")

также с помощью этой функции можно:
Serial.println(3.1415926, 3) // вывожу три знака после запятой 
Serial.println(val, <базис>) // могу вывести число в определенной системе счисления

базисы:
DEC - десятичная
HEX - 16-ричная
OCT - 8-ричная
BIN - двоичная

ПРИНЯТИЕ ДАННЫХ
когда отправляем данные на плату они собираются в буфер, размером 64 байта
Serial.available() - проверка на наличие в буфере входящих данных(что он не 0 байт)
Serial.read() - как input(), но только в символьном формате 
Serila.read() - '0' - проитать данные в целочисленном формате, но только по одной цифре 
Serial.parselInt(); - прочитать данные в целоичсленном формате, уже число целиком
Serial.flush() - очистить буфер порта

оператор выбора switch(case):
то же самое что match case в питоне

num = 1

match num:
    case 0:
        print(f"{num} равна 0")

    case _:
        print("дефолтный случай")


только тут:
switch (val){
    case 1: Serial.println("")
        break;
    case 2: Serial.printLn("")
        break;
    default:
        базовый случай
}